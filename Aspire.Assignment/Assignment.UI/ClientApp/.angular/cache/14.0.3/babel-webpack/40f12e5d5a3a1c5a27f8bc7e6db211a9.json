{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { GoogleLoginProvider } from '@abacritt/angularx-social-login';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../_services/account.service\";\nimport * as i4 from \"../_services/alert.service\";\nimport * as i5 from \"@abacritt/angularx-social-login\";\nimport * as i6 from \"@angular/common\";\n\nfunction LoginComponent_div_16_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Username is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, LoginComponent_div_16_div_1_Template, 2, 0, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.f.username.errors.required);\n  }\n}\n\nfunction LoginComponent_div_21_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, LoginComponent_div_21_div_1_Template, 2, 0, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.password.errors.required);\n  }\n}\n\nfunction LoginComponent_span_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 16);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\n\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(formBuilder, route, router, accountService, alertService, authService, _ngZone) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.accountService = accountService;\n      this.alertService = alertService;\n      this.authService = authService;\n      this._ngZone = _ngZone;\n      this.loading = false;\n      this.submitted = false;\n\n      this.externalLogin = () => {\n        debugger;\n        const externalAuth = {\n          provider: this.user.provider,\n          idToken: this.user.idToken\n        };\n        this.validateExternalAuth(externalAuth);\n      };\n    }\n\n    ngOnInit() {\n      this.form = this.formBuilder.group({\n        username: ['', Validators.required],\n        password: ['', Validators.required]\n      });\n      this.authService.authState.subscribe(user => {\n        debugger;\n        console.log(user);\n        this.user = user;\n        this.externalLogin();\n      });\n    }\n\n    validateExternalAuth(externalAuth) {\n      this.accountService.externalLogin(externalAuth).subscribe({\n        next: res => {\n          localStorage.setItem(\"token\", res.token);\n          const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n          this.router.navigateByUrl(returnUrl);\n        },\n        error: err => {}\n      });\n    } // convenience getter for easy access to form fields\n\n\n    get f() {\n      return this.form.controls;\n    }\n\n    onSubmit() {\n      this.submitted = true; // reset alerts on submit\n\n      this.alertService.clear(); // stop here if form is invalid\n\n      if (this.form.invalid) {\n        return;\n      }\n\n      this.loading = true;\n      this.accountService.login(this.f.username.value, this.f.password.value) // .pipe(first())\n      .subscribe({\n        next: data => {\n          console.log('data', data);\n          this.RoleId = data.roleId;\n          this.authenticateUser(this.RoleId); // get return url from query parameters or default to home page\n\n          if (this.RoleId == 1) {\n            const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/adminDash/home';\n            this.router.navigateByUrl(returnUrl);\n          } else if (this.RoleId == 2) {\n            const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/devDash/home';\n            this.router.navigateByUrl(returnUrl);\n          } else if (this.RoleId == 3) {\n            const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/userDash/home';\n            this.router.navigateByUrl(returnUrl);\n          }\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n\n    signInWithGoogle() {\n      this.authService.signIn(GoogleLoginProvider.PROVIDER_ID).then(x => console.log(x));\n    }\n\n    signOut() {\n      this.authService.signOut();\n    }\n\n    logInWithGoogle(platform) {\n      debugger;\n      platform = GoogleLoginProvider.PROVIDER_ID; //Sign In and get user Info using authService that we just injected\n\n      this.authService.signIn(platform).then(response => {\n        //Get all user details\n        console.log(platform + ' logged in user data is= ', response); //Take the details we need and store in an array\n\n        this.userData.push({\n          provider: response.provider,\n          firstname: response.firstName,\n          lastname: response.lastName,\n          email: response.email\n        });\n      }, error => {\n        console.log(error);\n      });\n    }\n\n    authenticateUser(RoleId) {\n      debugger;\n\n      if (RoleId == 1 && RoleId != 2 && RoleId != 3) {\n        this.router.navigate(['/adminDash']);\n        const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/adminDash/home';\n        this.router.navigateByUrl(returnUrl);\n      } else if (RoleId == 2 && RoleId != 1 && RoleId != 3) {\n        this.router.navigate(['/devDash']);\n        const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/devDash/home';\n        this.router.navigateByUrl(returnUrl);\n      } else if (RoleId == 3 && RoleId != 1 && RoleId != 2) {\n        this.router.navigate(['/userDash']);\n        const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/userDash/home';\n        this.router.navigateByUrl(returnUrl);\n      }\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AccountService), i0.ɵɵdirectiveInject(i4.AlertService), i0.ɵɵdirectiveInject(i5.SocialAuthService), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 28,\n    vars: 11,\n    consts: [[1, \"card\"], [1, \"card-header\"], [2, \"padding\", \"20px\"], [\"type\", \"button\", 1, \"btn\", \"btn-info\", 3, \"click\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [1, \"form-label\"], [\"title\", \"Username\", \"type\", \"text\", \"formControlName\", \"username\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"title\", \"Password\", \"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"ngClass\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-1\", 4, \"ngIf\"], [\"routerLink\", \"../register\", 1, \"btn\", \"btn-link\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [1, \"spinner-border\", \"spinner-border-sm\", \"me-1\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h4\", 1);\n        i0.ɵɵtext(2, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\")(4, \"div\")(5, \"h2\");\n        i0.ɵɵtext(6, \"External Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 2)(8, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_8_listener() {\n          return ctx.externalLogin();\n        });\n        i0.ɵɵtext(9, \"Google\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(10, \"div\", 4)(11, \"form\", 5);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_11_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(12, \"div\", 6)(13, \"label\", 7);\n        i0.ɵɵtext(14, \"Username\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 8);\n        i0.ɵɵtemplate(16, LoginComponent_div_16_Template, 2, 1, \"div\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 6)(18, \"label\", 7);\n        i0.ɵɵtext(19, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(20, \"input\", 10);\n        i0.ɵɵtemplate(21, LoginComponent_div_21_Template, 2, 1, \"div\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"div\")(23, \"button\", 11);\n        i0.ɵɵtemplate(24, LoginComponent_span_24_Template, 1, 0, \"span\", 12);\n        i0.ɵɵtext(25, \" Login \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"a\", 13);\n        i0.ɵɵtext(27, \"Register\");\n        i0.ɵɵelementEnd()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, ctx.submitted && ctx.f.username.errors));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.username.errors);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx.submitted && ctx.f.password.errors));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.password.errors);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n      }\n    },\n    dependencies: [i6.NgClass, i6.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i2.RouterLinkWithHref],\n    encapsulation: 2\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}