{"ast":null,"code":"import _asyncToGenerator from \"D:/Assignment/Aspire.Assignment/Assignment.UI/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BaseLoginProvider } from '../entities/base-login-provider';\nimport { SocialUser } from '../entities/social-user';\nimport { EventEmitter } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, skip, take } from 'rxjs/operators';\nconst defaultInitOptions = {\n  oneTapEnabled: true\n};\nexport class GoogleLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n    this.changeUser = new EventEmitter();\n    this._socialUser = new BehaviorSubject(null);\n    this._accessToken = new BehaviorSubject(null);\n    this._receivedAccessToken = new EventEmitter();\n    this.initOptions = Object.assign(Object.assign({}, defaultInitOptions), this.initOptions); // emit changeUser events but skip initial value from behaviorSubject\n\n    this._socialUser.pipe(skip(1)).subscribe(this.changeUser); // emit receivedAccessToken but skip initial value from behaviorSubject\n\n\n    this._accessToken.pipe(skip(1)).subscribe(this._receivedAccessToken);\n  }\n\n  initialize(autoLogin) {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://accounts.google.com/gsi/client', () => {\n          var _a;\n\n          google.accounts.id.initialize({\n            client_id: this.clientId,\n            auto_select: autoLogin,\n            callback: ({\n              credential\n            }) => {\n              const socialUser = this.createSocialUser(credential);\n\n              this._socialUser.next(socialUser);\n            },\n            prompt_parent_id: (_a = this.initOptions) === null || _a === void 0 ? void 0 : _a.prompt_parent_id,\n            itp_support: this.initOptions.oneTapEnabled\n          });\n\n          if (this.initOptions.oneTapEnabled) {\n            this._socialUser.pipe(filter(user => user === null)).subscribe(() => google.accounts.id.prompt(console.debug));\n          }\n\n          if (this.initOptions.scopes) {\n            const scope = this.initOptions.scopes instanceof Array ? this.initOptions.scopes.filter(s => s).join(' ') : this.initOptions.scopes;\n            this._tokenClient = google.accounts.oauth2.initTokenClient({\n              client_id: this.clientId,\n              scope,\n              prompt: this.initOptions.prompt,\n              callback: tokenResponse => {\n                if (tokenResponse.error) {\n                  this._accessToken.error({\n                    code: tokenResponse.error,\n                    description: tokenResponse.error_description,\n                    uri: tokenResponse.error_uri\n                  });\n                } else {\n                  this._accessToken.next(tokenResponse.access_token);\n                }\n              }\n            });\n          }\n\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      if (this._socialUser.value) {\n        resolve(this._socialUser.value);\n      } else {\n        reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n\n  refreshToken() {\n    return new Promise((resolve, reject) => {\n      google.accounts.id.revoke(this._socialUser.value.id, response => {\n        if (response.error) reject(response.error);else resolve(this._socialUser.value);\n      });\n    });\n  }\n\n  getAccessToken() {\n    return new Promise((resolve, reject) => {\n      var _a;\n\n      if (!this._tokenClient) {\n        if (this._socialUser.value) {\n          reject('No token client was instantiated, you should specify some scopes.');\n        } else {\n          reject('You should be logged-in first.');\n        }\n      } else {\n        this._tokenClient.requestAccessToken({\n          hint: (_a = this._socialUser.value) === null || _a === void 0 ? void 0 : _a.email\n        });\n\n        this._receivedAccessToken.pipe(take(1)).subscribe(resolve);\n      }\n    });\n  }\n\n  revokeAccessToken() {\n    return new Promise((resolve, reject) => {\n      if (!this._tokenClient) {\n        reject('No token client was instantiated, you should specify some scopes.');\n      } else if (!this._accessToken.value) {\n        reject('No access token to revoke');\n      } else {\n        google.accounts.oauth2.revoke(this._accessToken.value, () => {\n          this._accessToken.next(null);\n\n          resolve();\n        });\n      }\n    });\n  }\n\n  signIn() {\n    return Promise.reject('You should not call this method directly for Google, use \"<asl-google-signin-button>\" wrapper ' + 'or generate the button yourself with \"google.accounts.id.renderButton()\" ' + '(https://developers.google.com/identity/gsi/web/guides/display-button#javascript)');\n  }\n\n  signOut() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      google.accounts.id.disableAutoSelect();\n\n      _this._socialUser.next(null);\n    })();\n  }\n\n  createSocialUser(idToken) {\n    const user = new SocialUser();\n    user.idToken = idToken;\n    const payload = this.decodeJwt(idToken);\n    user.id = payload.sub;\n    user.name = payload.name;\n    user.email = payload.email;\n    user.photoUrl = payload.picture;\n    user.firstName = payload['given_name'];\n    user.lastName = payload['family_name'];\n    return user;\n  }\n\n  decodeJwt(idToken) {\n    const base64Url = idToken.split(\".\")[1];\n    const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const jsonPayload = decodeURIComponent(window.atob(base64).split(\"\").map(function (c) {\n      return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(\"\"));\n    return JSON.parse(jsonPayload);\n  }\n\n}\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';","map":{"version":3,"mappings":"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","names":["BaseLoginProvider","SocialUser","EventEmitter","BehaviorSubject","filter","skip","take","defaultInitOptions","oneTapEnabled","GoogleLoginProvider","constructor","clientId","initOptions","Object","_socialUser","pipe","subscribe","changeUser","_accessToken","_receivedAccessToken","initialize","autoLogin","Promise","resolve","reject","loadScript","PROVIDER_ID","google","accounts","id","client_id","auto_select","callback","credential","socialUser","createSocialUser","next","prompt_parent_id","_a","itp_support","user","prompt","console","debug","scopes","scope","Array","s","join","_tokenClient","oauth2","initTokenClient","tokenResponse","error","code","description","error_description","uri","error_uri","access_token","err","getLoginStatus","value","refreshToken","revoke","response","getAccessToken","requestAccessToken","hint","email","revokeAccessToken","signIn","signOut","disableAutoSelect","idToken","payload","decodeJwt","sub","name","photoUrl","picture","firstName","lastName","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","JSON","parse"],"sourceRoot":"","sources":["D:\\Assignment\\Aspire.Assignment\\Assignment.UI\\ClientApp\\projects\\lib\\src\\providers\\google-login-provider.ts"],"sourcesContent":["import { BaseLoginProvider } from '../entities/base-login-provider';\r\nimport { SocialUser } from '../entities/social-user';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { filter, skip, take } from 'rxjs/operators';\r\n\r\nexport interface GoogleInitOptions {\r\n  /**\r\n   * enables the One Tap mechanism, and makes auto-login possible\r\n   */\r\n  oneTapEnabled?: boolean;\r\n  /**\r\n   * list of permission scopes to grant in case we request an access token\r\n   */\r\n  scopes?: string | string[];\r\n /**\r\n   * This attribute sets the DOM ID of the container element. If it's not set, the One Tap prompt is displayed in the top-right corner of the window.\r\n   */\r\n  prompt_parent_id?: string;\r\n\r\n  /**\r\n   * Optional, defaults to 'select_account'.\r\n   * A space-delimited, case-sensitive list of prompts to present the\r\n   * user.\r\n   * Possible values are:\r\n   * empty string The user will be prompted only the first time your\r\n   *     app requests access. Cannot be specified with other values.\r\n   * 'none' Do not display any authentication or consent screens. Must\r\n   *     not be specified with other values.\r\n   * 'consent' Prompt the user for consent.\r\n   * 'select_account' Prompt the user to select an account.\r\n   */\r\n  prompt? : '' | 'none' | 'consent' | 'select_account';\r\n}\r\n\r\nconst defaultInitOptions: GoogleInitOptions = {\r\n  oneTapEnabled: true,\r\n};\r\n\r\nexport class GoogleLoginProvider extends BaseLoginProvider {\r\n  public static readonly PROVIDER_ID: string = 'GOOGLE';\r\n\r\n  public readonly changeUser = new EventEmitter<SocialUser | null>();\r\n\r\n  private readonly _socialUser = new BehaviorSubject<SocialUser | null>(null);\r\n  private readonly _accessToken = new BehaviorSubject<string | null>(null);\r\n  private readonly _receivedAccessToken = new EventEmitter<string>();\r\n  private _tokenClient: google.accounts.oauth2.TokenClient | undefined;\r\n\r\n  constructor(\r\n    private clientId: string,\r\n    private readonly initOptions?: GoogleInitOptions\r\n  ) {\r\n    super();\r\n\r\n    this.initOptions = { ...defaultInitOptions, ...this.initOptions };\r\n\r\n    // emit changeUser events but skip initial value from behaviorSubject\r\n    this._socialUser.pipe(skip(1)).subscribe(this.changeUser);\r\n\r\n    // emit receivedAccessToken but skip initial value from behaviorSubject\r\n    this._accessToken.pipe(skip(1)).subscribe(this._receivedAccessToken);\r\n  }\r\n\r\n  initialize(autoLogin?: boolean): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        this.loadScript(\r\n          GoogleLoginProvider.PROVIDER_ID,\r\n          'https://accounts.google.com/gsi/client',\r\n          () => {\r\n            google.accounts.id.initialize({\r\n              client_id: this.clientId,\r\n              auto_select: autoLogin,\r\n              callback: ({ credential }) => {\r\n                const socialUser = this.createSocialUser(credential);\r\n                this._socialUser.next(socialUser);\r\n              },\r\n              prompt_parent_id: this.initOptions?.prompt_parent_id,\r\n              itp_support: this.initOptions.oneTapEnabled\r\n            });\r\n\r\n            if (this.initOptions.oneTapEnabled) {\r\n              this._socialUser\r\n                .pipe(filter((user) => user === null))\r\n                .subscribe(() => google.accounts.id.prompt(console.debug));\r\n            }\r\n\r\n            if (this.initOptions.scopes) {\r\n              const scope =\r\n                this.initOptions.scopes instanceof Array\r\n                  ? this.initOptions.scopes.filter((s) => s).join(' ')\r\n                  : this.initOptions.scopes;\r\n\r\n              this._tokenClient = google.accounts.oauth2.initTokenClient({\r\n                client_id: this.clientId,\r\n                scope,\r\n                prompt : this.initOptions.prompt,\r\n                callback: (tokenResponse) => {\r\n                  if (tokenResponse.error) {\r\n                    this._accessToken.error({\r\n                      code: tokenResponse.error,\r\n                      description: tokenResponse.error_description,\r\n                      uri: tokenResponse.error_uri,\r\n                    });\r\n                  } else {\r\n                    this._accessToken.next(tokenResponse.access_token);\r\n                  }\r\n                },\r\n              });\r\n            }\r\n\r\n            resolve();\r\n          }\r\n        );\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  getLoginStatus(): Promise<SocialUser> {\r\n    return new Promise((resolve, reject) => {\r\n      if (this._socialUser.value) {\r\n        resolve(this._socialUser.value);\r\n      } else {\r\n        reject(\r\n          `No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  refreshToken(): Promise<SocialUser | null> {\r\n    return new Promise((resolve, reject) => {\r\n      google.accounts.id.revoke(this._socialUser.value.id, (response) => {\r\n        if (response.error) reject(response.error);\r\n        else resolve(this._socialUser.value);\r\n      });\r\n    });\r\n  }\r\n\r\n  getAccessToken(): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this._tokenClient) {\r\n        if (this._socialUser.value) {\r\n          reject(\r\n            'No token client was instantiated, you should specify some scopes.'\r\n          );\r\n        } else {\r\n          reject('You should be logged-in first.');\r\n        }\r\n      } else {\r\n        this._tokenClient.requestAccessToken({\r\n          hint: this._socialUser.value?.email,\r\n        });\r\n        this._receivedAccessToken.pipe(take(1)).subscribe(resolve);\r\n      }\r\n    });\r\n  }\r\n\r\n  revokeAccessToken(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this._tokenClient) {\r\n        reject(\r\n          'No token client was instantiated, you should specify some scopes.'\r\n        );\r\n      } else if (!this._accessToken.value) {\r\n        reject('No access token to revoke');\r\n      } else {\r\n        google.accounts.oauth2.revoke(this._accessToken.value, () => {\r\n          this._accessToken.next(null);\r\n          resolve();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  signIn(): Promise<SocialUser> {\r\n    return Promise.reject(\r\n      'You should not call this method directly for Google, use \"<asl-google-signin-button>\" wrapper ' +\r\n        'or generate the button yourself with \"google.accounts.id.renderButton()\" ' +\r\n        '(https://developers.google.com/identity/gsi/web/guides/display-button#javascript)'\r\n    );\r\n  }\r\n\r\n  async signOut(): Promise<void> {\r\n    google.accounts.id.disableAutoSelect();\r\n    this._socialUser.next(null);\r\n  }\r\n\r\n  private createSocialUser(idToken: string) {\r\n    const user = new SocialUser();\r\n    user.idToken = idToken;\r\n    const payload = this.decodeJwt(idToken);\r\n    user.id = payload.sub;\r\n    user.name = payload.name;\r\n    user.email = payload.email;\r\n    user.photoUrl = payload.picture;\r\n    user.firstName = payload['given_name'];\r\n    user.lastName = payload['family_name'];\r\n    return user;\r\n  }\r\n\r\n  private decodeJwt(idToken: string): Record<string, string | undefined> {\r\n    const base64Url = idToken.split(\".\")[1];\r\n    const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n    const jsonPayload = decodeURIComponent(\r\n      window.atob(base64)\r\n        .split(\"\")\r\n        .map(function (c) {\r\n          return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\r\n        })\r\n        .join(\"\")\r\n    );\r\n    return JSON.parse(jsonPayload);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}