{"ast":null,"code":"import _asyncToGenerator from \"D:/Aspire-Assignment/Aspire.Assignment/Assignment.UI/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport { GoogleLoginProvider } from '@abacritt/angularx-social-login';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../_services/account.service\";\nimport * as i4 from \"../_services/alert.service\";\nimport * as i5 from \"@abacritt/angularx-social-login\";\nimport * as i6 from \"@angular/common\";\n\nfunction LoginComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"li\", 14)(2, \"a\", 15);\n    i0.ɵɵlistener(\"click\", function LoginComponent_div_3_Template_a_click_2_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.signInWithGoogle());\n    });\n    i0.ɵɵtext(3, \"Sign in with google\");\n    i0.ɵɵelementEnd()()();\n  }\n}\n\nfunction LoginComponent_div_10_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Username is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, LoginComponent_div_10_div_1_Template, 2, 0, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.username.errors.required);\n  }\n}\n\nfunction LoginComponent_div_15_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, LoginComponent_div_15_div_1_Template, 2, 0, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.f.password.errors.required);\n  }\n}\n\nfunction LoginComponent_span_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 18);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\n\nexport class LoginComponent {\n  constructor(formBuilder, route, router, accountService, alertService, authService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.accountService = accountService;\n    this.alertService = alertService;\n    this.authService = authService;\n    this.loading = false;\n    this.submitted = false;\n    this.authService.authState.subscribe(user => {\n      console.log(user);\n      this.user = user;\n    });\n  }\n\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n\n    window.onGoogleLibraryLoad = () => {\n      // @ts-ignore\n      google.accounts.id.initialize({\n        client_id: this.clientId,\n        callback: this.handleCredentialResponse.bind(this),\n        auto_select: false,\n        cancel_on_tap_outside: true\n      }); // @ts-ignore\n\n      google.accounts.id.renderButton( // @ts-ignore\n      document.getElementById(\"buttonDiv\"), {\n        theme: \"outline\",\n        size: \"large\",\n        width: \"100%\"\n      }); // @ts-ignore\n\n      google.accounts.id.prompt(notification => {});\n    };\n  }\n\n  handleCredentialResponse(response) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.accountService.LoginWithGoogle(response.credential).subscribe(x => {\n        _this._ngZone.run(() => {\n          _this.router.navigate(['/logout']);\n        });\n      }, error => {\n        console.log(error);\n      });\n    })();\n  } // convenience getter for easy access to form fields\n\n\n  get f() {\n    return this.form.controls;\n  }\n\n  onSubmit() {\n    this.submitted = true; // reset alerts on submit\n\n    this.alertService.clear(); // stop here if form is invalid\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.accountService.login(this.f.username.value, this.f.password.value) // .pipe(first())\n    .subscribe({\n      next: data => {\n        console.log('data', data);\n        this.RoleId = data.roleId;\n        this.authenticateUser(this.RoleId); // get return url from query parameters or default to home page\n\n        const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n        this.router.navigateByUrl(returnUrl);\n      },\n      error: error => {\n        this.alertService.error(error);\n        this.loading = false;\n      }\n    });\n  }\n\n  signInWithGoogle() {\n    this.authService.signIn(GoogleLoginProvider.PROVIDER_ID).then(x => console.log(x));\n  }\n\n  signOut() {\n    this.authService.signOut();\n  }\n\n  authenticateUser(RoleId) {\n    debugger;\n\n    if (RoleId == 1) {\n      this.router.navigate(['/adminDash']);\n    } else if (RoleId == 2) {\n      this.router.navigate(['/devDash']);\n    } else if (RoleId == 3) {\n      this.router.navigate(['/userDash']);\n    }\n  }\n\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AccountService), i0.ɵɵdirectiveInject(i4.AlertService), i0.ɵɵdirectiveInject(i5.SocialAuthService));\n};\n\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"ng-component\"]],\n  decls: 22,\n  vars: 12,\n  consts: [[1, \"card\"], [1, \"card-header\"], [\"class\", \"navbar-nav ml-auto\", 4, \"ngIf\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [1, \"form-label\"], [\"title\", \"Username\", \"type\", \"text\", \"formControlName\", \"username\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"title\", \"Password\", \"type\", \"text\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"ngClass\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-1\", 4, \"ngIf\"], [\"routerLink\", \"../register\", 1, \"btn\", \"btn-link\"], [1, \"navbar-nav\", \"ml-auto\"], [1, \"nav-item\"], [1, \"nav-link\", 3, \"click\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [1, \"spinner-border\", \"spinner-border-sm\", \"me-1\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h4\", 1);\n      i0.ɵɵtext(2, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, LoginComponent_div_3_Template, 4, 0, \"div\", 2);\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"form\", 4);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 6);\n      i0.ɵɵtext(8, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 7);\n      i0.ɵɵtemplate(10, LoginComponent_div_10_Template, 2, 1, \"div\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 5)(12, \"label\", 6);\n      i0.ɵɵtext(13, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"input\", 9);\n      i0.ɵɵtemplate(15, LoginComponent_div_15_Template, 2, 1, \"div\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\")(17, \"button\", 10);\n      i0.ɵɵtemplate(18, LoginComponent_span_18_Template, 1, 0, \"span\", 11);\n      i0.ɵɵtext(19, \" Login \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"a\", 12);\n      i0.ɵɵtext(21, \"Register\");\n      i0.ɵɵelementEnd()()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", !ctx.user);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(8, _c0, ctx.submitted && ctx.f.username.errors));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.username.errors);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c0, ctx.submitted && ctx.f.password.errors));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.password.errors);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.loading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.loading);\n    }\n  },\n  dependencies: [i6.NgClass, i6.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i2.RouterLinkWithHref],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","GoogleLoginProvider","i0","LoginComponent","constructor","formBuilder","route","router","accountService","alertService","authService","authState","subscribe","user","console","log","ngOnInit","form","group","username","required","password","window","onGoogleLibraryLoad","google","accounts","id","initialize","client_id","clientId","callback","handleCredentialResponse","bind","auto_select","cancel_on_tap_outside","renderButton","document","getElementById","theme","size","width","prompt","notification","response","LoginWithGoogle","credential","x","_ngZone","run","navigate","error","f","controls","onSubmit","submitted","clear","invalid","loading","login","value","next","data","RoleId","roleId","authenticateUser","returnUrl","snapshot","queryParams","navigateByUrl","signInWithGoogle","signIn","PROVIDER_ID","then","signOut","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\Aspire-Assignment\\Aspire.Assignment\\Assignment.UI\\ClientApp\\src\\app\\account\\login.component.ts","D:\\Aspire-Assignment\\Aspire.Assignment\\Assignment.UI\\ClientApp\\src\\app\\account\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { AccountService } from '../_services/account.service';\nimport { AlertService } from '../_services/alert.service';\nimport { SocialAuthService  } from '@abacritt/angularx-social-login';\nimport { SocialUser } from '@abacritt/angularx-social-login';\nimport { GoogleLoginProvider } from '@abacritt/angularx-social-login';\nimport { CredentialResponse } from 'google-one-tap';\n\n@Component({ templateUrl: 'login.component.html' })\nexport class LoginComponent implements OnInit {\n    form!: FormGroup;\n    loading = false;\n    submitted = false;\n    user!: SocialUser; \n    RoleId! : number;\n  private _ngZone: any;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private accountService: AccountService,\n        private alertService: AlertService,\n        private authService: SocialAuthService\n    ) { \n\t    this.authService.authState.subscribe((user: SocialUser) => {\n        console.log(user);\n        this.user = user;\n\t});\n    }\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            username: ['', Validators.required],\n            password: ['', Validators.required]\n        });\n\n        window.onGoogleLibraryLoad = () => {\n          // @ts-ignore\n          google.accounts.id.initialize({\n            client_id: this.clientId,\n            callback: this.handleCredentialResponse.bind(this),\n            auto_select: false,\n            cancel_on_tap_outside: true\n          });\n          // @ts-ignore\n          google.accounts.id.renderButton(\n          // @ts-ignore\n          document.getElementById(\"buttonDiv\"),\n            { theme: \"outline\", size: \"large\", width: \"100%\" } \n          );\n          // @ts-ignore\n          google.accounts.id.prompt((notification: PromptMomentNotification) => {});\n        };\n    }\n\n    async handleCredentialResponse(response: CredentialResponse) {\n      this.accountService.LoginWithGoogle(response.credential).subscribe(\n        (x: any) => {\n          this._ngZone.run(() => {\n            this.router.navigate(['/logout']);\n          });\n        },\n        (error: any) => {\n          console.log(error);\n        }\n      );  \n  }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.form.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.form.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.accountService.login(this.f.username.value, this.f.password.value)\n           // .pipe(first())\n            .subscribe({\n                next: (data : any) => {\n                    console.log('data',data)\n                    this.RoleId = data.roleId;\n                    this.authenticateUser(this.RoleId);\n                    // get return url from query parameters or default to home page\n                    const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n                    this.router.navigateByUrl(returnUrl);\n                },\n                error: (error: any) => {\n                    this.alertService.error(error);\n                    this.loading = false;\n                }\n            });\n    }\n    signInWithGoogle(): void {\n    this.authService.signIn(GoogleLoginProvider.PROVIDER_ID).then((x: any) => console.log(x));\n  }\n\n    signOut(): void {\n    this.authService.signOut();\n    } \n\n\n    authenticateUser(RoleId : any){\n        debugger;\n        if(RoleId == 1){\n          this.router.navigate(['/adminDash']);\n        } else if(RoleId == 2){ \n          this.router.navigate(['/devDash']);\n        } else if(RoleId == 3){\n          this.router.navigate(['/userDash'])\n        }\n      }\n    \n}","\n<div class=\"card\">\n  <h4 class=\"card-header\">Login</h4>\n  <div class=\"navbar-nav ml-auto\" *ngIf=\"!user\">\n      <li class=\"nav-item\">\n        <a (click)=\"signInWithGoogle()\" class=\"nav-link\">Sign in with google</a>\n      </li>\n    </div> \n    <!-- <script src=\"https://accounts.google.com/gsi/client\" async defer></script>\n    <div id=\"g_id_onload\"\n       data-client_id=\"69444274473-fkj187lq3sjvfvq6somuhrqjh74oiqpc.apps.googleusercontent.com\"\n       data-login_uri=\"https://localhost:5001/api/User/authenticate\"\n       data-auto_prompt=\"false\">\n    </div>\n    <div class=\"g_id_signin\"\n       data-type=\"standard\"\n       data-size=\"large\"\n       data-theme=\"outline\"\n       data-text=\"sign_in_with\"\n       data-shape=\"rectangular\"\n       data-logo_alignment=\"left\">\n    </div>\n    <script>\n      function handleCredentialResponse(response) {\n        console.log(\"Encoded JWT ID token: \" + response.credential);\n      }\n      window.onload = function () {\n        google.accounts.id.initialize({\n          client_id: \"YOUR_GOOGLE_CLIENT_ID\",\n          callback: handleCredentialResponse\n        });\n        google.accounts.id.renderButton(\n          document.getElementById(\"buttonDiv\"),\n          { theme: \"outline\", size: \"large\" }  // customization attributes\n        );\n        google.accounts.id.prompt(); // also display the One Tap dialog\n      }\n  </script> -->\n  <div class=\"card-body\">\n      <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n          <div class=\"mb-3\">\n              <label class=\"form-label\">Username</label>\n              <input title=\"Username\" type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\n              <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\n                  <div *ngIf=\"f.username.errors.required\">Username is required</div>\n              </div>\n          </div>\n          <div class=\"mb-3\">\n              <label class=\"form-label\">Password</label>\n              <input title=\"Password\" type=\"text\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n              <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                  <div *ngIf=\"f.password.errors.required\">Password is required</div>\n              </div>\n          </div>\n          <div>\n              <button type=\"submit\" [disabled]=\"loading\" class=\"btn btn-primary\">\n                  <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm me-1\"></span>\n                  Login\n              </button>\n              <a routerLink=\"../register\" class=\"btn btn-link\">Register</a>\n          </div>\n      </form>\n  </div>\n</div>\n\n<!-- <div class=\"tab-pane fade show active\" id=\"pills-login\" role=\"tabpanel\" aria-labelledby=\"tab-login\">\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"text-center mb-3\">\n        <p>Sign in with:</p>\n\n       \n        <button type=\"button\" class=\"btn btn-secondary btn-floating mx-1\">\n            <i class=\"fab fa-google\"></i>\n          <a (click)=\"signInWithGoogle()\" class=\"nav-link\">  </a>\n        </button>\n        \n      </div>\n\n      <p class=\"text-center\">or:</p>\n      <div class=\"form-outline mb-4\">\n        <label class=\"form-label\">Username</label>\n        <input title=\"Username\" type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\n        <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\n            <div *ngIf=\"f.username.errors.required\">Username is required</div>\n        </div>\n      </div>\n\n      <div class=\"form-outline mb-4\">\n        <label class=\"form-label\">Password</label>\n                <input title=\"Password\" type=\"text\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                </div>\n      </div>\n\n      <button type=\"submit\" [disabled]=\"loading\" class=\"btn btn-primary btn-block mb-4\">\n        <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm me-1\"></span>\n        Sign in\n    </button>\n      <div class=\"text-center\">\n        <p>Not a member? <a routerLink=\"../register\">Register</a></p>\n      </div>\n    </form>\n  </div> -->"]},"metadata":{},"sourceType":"module"}